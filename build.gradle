buildscript {
    ext.kotlin_version = '1.9.25'
    ext.protobuf_version = '0.8.10'
    ext.grpc_version = '1.26.0'
    ext.jackson_version = '2.13.1'
    ext.boot_version = "2.7.18"
    
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "idea"
    id "java"
    id "maven-publish"
}

group 'io.opencui'
version '1.1-SNAPSHOT'


compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    all {
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    // Add this to enforce logback as your only logging implementation
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    compileOnly "org.slf4j:slf4j-api:2.0.16"
    implementation 'ch.qos.logback:logback-core:1.5.16'
    implementation("ch.qos.logback:logback-classic:1.5.16"){
        exclude(group: 'org.slf4j', module: 'slf4j-simple')
        exclude(group: "org.apache.logging.log4j", module: "log4j-to-slf4j")
    }
    implementation "org.clojure:clojure:1.12.0"
    implementation("org.springframework.boot:spring-boot-starter-webflux:${boot_version}"){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation "org.clojure:data.json:2.5.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    implementation "org.apache.lucene:lucene-core:8.4.1"
    implementation "org.apache.lucene:lucene-analyzers-smartcn:8.4.1"
    implementation "org.apache.lucene:lucene-queryparser:8.4.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-compiler"
    implementation 'org.apache.kafka:kafka-clients:3.8.1'

     constraints {
        implementation("org.slf4j:slf4j-api:2.0.16") {
            because("Ensure SLF4J version consistency")
        }
        implementation("ch.qos.logback:logback-classic:1.5.16") {
            because("Ensure Logback is the only SLF4J binding")
        }
    }

    // We need to stick to older version of h2 so that test can be done faster enough.
    // New h2 requires tcp connection, much slower. That is why we can NOT enforcePlatform
    // to latest SpringBoot
    testImplementation "com.h2database:h2:1.4.197"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    testImplementation files('libs/duckling-0.4.24-standalone.jar')
}


task deployLocalJar(type: Copy) {
    from "libs/duckling-0.4.24-standalone.jar" // Replace with the actual path to your JAR file
    into "${System.properties['user.home']}/.m2/repository/io/opencui/duckling/0.4.24-standalone"
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}


